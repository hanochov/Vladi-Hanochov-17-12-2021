{"version":3,"sources":["store/ui-slice.js","store/favorites-slice.js","store/autocompleteApi-slice.js","store/currenWeatherApi-slice.js","store/index.js","components/UI/img/winter.jpg","components/UI/img/spring.jpg","components/UI/img/summer.jpg","components/UI/CardDay.js","components/Main/CurrentWeather.js","components/Main/NextDaysWeather.js","components/Main/SearchCity.js","components/UI/ErrorNotifactions.js","components/Main/Main.js","components/UI/CardWeather.js","components/UI/img/pexels-david-jakab-1080722.jpg","components/Favorites/Favorites.js","components/Navigation/Navigation.js","App.js","index.js"],"names":["uiSlice","createSlice","name","initialState","isVisible","autocompleteNotification","currentconditionsNotification","forecastsNotification","reducers","toggle","state","showAutocompleteNotification","action","status","payload","title","message","type","showCurrentconditionsNotification","showForecastsNotification","uiActions","actions","favoritesSlice","items","isFavorite","toggleFavorites","newItem","find","item","id","filter","push","curWeather","description","toggleStatus","favoritesActions","autocompleteApiSlice","currentInput","setCurrentInput","newInput","autocompleteApiActions","currenWeatherApiSlice","cities","currentWeatherDescription","currentTemperature","currentKey","key","cityId","label","nextDaysDetails","setCurrentCities","setCurrentKey","setCurrentCityDetails","subLabel","temperature","setNextDaysDetails","index","length","EpochDate","toString","date","Date","split","maxTemp","Temperature","Maximum","Value","minTemp","Minimum","currenWeatherApiActions","store","configureStore","reducer","ui","favorites","autocompleteApi","currenWeatherApi","CardDay","props","Card","style","width","Body","Title","Subtitle","className","CurrentWeather","dispatch","useDispatch","toggleFav","useSelector","faoriteState","currentDescription","useEffect","x","Col","sm","color","Button","variant","onClick","NextDaysWeather","map","day","SearchCity","Autocomplete","disablePortal","options","renderInput","params","TextField","onChange","event","newValue","onInputChange","newInputValue","ErrorNotifactions","Toast","Header","alt","Main","accuweatherKey","autocompleteErroeMessage","currentconditionsErroeMessage","forecastsErroeMessage","getWeatherKey","a","fetch","response","ok","Error","json","data","transformedCities","city","Key","LocalizedName","AdministrativeArea","Country","getCityWeatherByKey","transformedCityDetails","EpochTime","WeatherText","Imperial","Unit","getCity5dayWeatherByKey","DailyForecasts","Container","Row","parseInt","Image","src","winterImg","fluid","springImg","summerImg","CardWeather","minHeight","Text","to","Favorites","favoritesCities","Alert","Heading","img","Navigation","textDecoration","fontFamily","exact","path","element","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.350787a7.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst uiSlice = createSlice({\r\n  name: \"ui\",\r\n  initialState: {\r\n    isVisible: true,\r\n    autocompleteNotification: null,\r\n    currentconditionsNotification: null,\r\n    forecastsNotification:null\r\n\r\n  },\r\n  reducers: {\r\n    toggle(state) {\r\n      state.isVisible = !state.isVisible;\r\n    },\r\n    showAutocompleteNotification(state, action) {\r\n      state.autocompleteNotification = {\r\n        status: action.payload.status,\r\n        title: action.payload.title,\r\n        message: action.payload.message,\r\n        type: action.payload.type,\r\n      };\r\n    },\r\n    showCurrentconditionsNotification(state, action) {\r\n      state.currentconditionsNotification = {\r\n        status: action.payload.status,\r\n        title: action.payload.title,\r\n        message: action.payload.message,\r\n        type: action.payload.type,\r\n      };\r\n    },\r\n    showForecastsNotification(state, action) {\r\n      state.forecastsNotification = {\r\n        status: action.payload.status,\r\n        title: action.payload.title,\r\n        message: action.payload.message,\r\n        type: action.payload.type,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const uiActions = uiSlice.actions;\r\nexport default uiSlice;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst favoritesSlice = createSlice({\r\n  name: \"favorites\",\r\n  initialState: {\r\n    items: [],\r\n    isFavorite: false,\r\n  },\r\n  reducers: {\r\n    toggleFavorites(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          name: newItem.name,\r\n          curWeather: newItem.curWeather,\r\n          description: newItem.description,\r\n        });\r\n        state.isFavorite = true;\r\n      } else {\r\n        state.items = state.items.filter((item) => item.id !== newItem.id);\r\n        state.isFavorite = false;\r\n      }\r\n    },\r\n\r\n    toggleStatus(state, action) {\r\n      if (action.payload===true) {\r\n        state.isFavorite = true;\r\n      } else {\r\n        state.isFavorite = false;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const favoritesActions = favoritesSlice.actions;\r\nexport default favoritesSlice;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst autocompleteApiSlice = createSlice({\r\n  name: \"autocompleteApi\",\r\n  initialState: {\r\n    currentInput: \"\",\r\n  },\r\n  reducers: {\r\n    setCurrentInput(state, action) {     \r\n      const newInput = action.payload;\r\n      state.currentInput = newInput;\r\n    },\r\n  },\r\n});\r\n\r\nexport const autocompleteApiActions = autocompleteApiSlice.actions;\r\nexport default autocompleteApiSlice;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst currenWeatherApiSlice = createSlice({\r\n  name: \"currenWeatherApi\",\r\n  initialState: {\r\n    cities: [],\r\n    currentWeatherDescription: \"\",\r\n    currentTemperature: \"\",\r\n    currentKey: {\r\n      key: \"215854\",\r\n      cityId: \"215854\",\r\n      label: \"Tel Aviv - Tel Aviv - Israel\",\r\n    },\r\n    nextDaysDetails: [],\r\n  },\r\n  reducers: {\r\n    setCurrentCities(state, action) {\r\n      const newInput = action.payload;\r\n      state.cities = newInput;\r\n    },\r\n\r\n    setCurrentKey(state, action) {\r\n      const newInput = action.payload;\r\n      if(newInput!==null){\r\n        state.currentKey = newInput;\r\n      }\r\n     \r\n    },\r\n    setCurrentCityDetails(state, action) {\r\n      const newInput = action.payload;\r\n      state.currentWeatherDescription = newInput[0].subLabel;\r\n      state.currentTemperature = newInput[0].temperature;\r\n    },\r\n    setNextDaysDetails(state, action) {\r\n      const newInput = action.payload;\r\n      state.nextDaysDetails = [];\r\n      for (let index = 0; index < newInput.length; index++) {\r\n        state.nextDaysDetails.push({\r\n          id:newInput[index].EpochDate.toString(),\r\n          date: new Date (newInput[index].EpochDate* 1000).toString().split(\" \")[0]   ,\r\n          maxTemp: newInput[index].Temperature.Maximum.Value,\r\n          minTemp: newInput[index].Temperature.Minimum.Value,\r\n        });\r\n      }\r\n\r\n    //  state.nextDaysDetails = displayDetails;\r\n    },\r\n  },\r\n});\r\n\r\nexport const currenWeatherApiActions = currenWeatherApiSlice.actions;\r\nexport default currenWeatherApiSlice;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport uiSlice from \"./ui-slice\";\r\nimport favoritesSlice from \"./favorites-slice\";\r\nimport autocompleteApiSlice from \"./autocompleteApi-slice\";\r\nimport currenWeatherApiSlice from \"./currenWeatherApi-slice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    ui: uiSlice.reducer,\r\n    favorites: favoritesSlice.reducer,\r\n    autocompleteApi: autocompleteApiSlice.reducer,\r\n    currenWeatherApi : currenWeatherApiSlice.reducer\r\n  },\r\n});\r\n\r\nexport default store;\r\n","export default __webpack_public_path__ + \"static/media/winter.7469a563.jpg\";","export default __webpack_public_path__ + \"static/media/spring.7223ee74.jpg\";","export default __webpack_public_path__ + \"static/media/summer.85947e84.jpg\";","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nfunction CardDay(props) {\r\n  return (\r\n    <div>\r\n      <Card style={{ width: \"12rem\" }}>\r\n        <Card.Body>\r\n          <Card.Title>{props.label}</Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">{props.subLabel}</Card.Subtitle>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">{props.description}</Card.Subtitle>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardDay;\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport CardDay from \"../UI/CardDay\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { favoritesActions } from \"../../store/favorites-slice\";\r\nimport { FaHeart } from \"react-icons/fa\";\r\n\r\nimport { Col, Button } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst CurrentWeather = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const toggleFav = useSelector((state) => state.favorites.isFavorite);\r\n  const faoriteState = useSelector((state) => state.favorites.items);\r\n  const currentKey = useSelector((state) => state.currenWeatherApi.currentKey);\r\n  const currentTemperature = useSelector(\r\n    (state) => state.currenWeatherApi.currentTemperature\r\n  );\r\n  const currentDescription = useSelector(\r\n    (state) => state.currenWeatherApi.currentWeatherDescription\r\n  );\r\n\r\n  const addToFavoritesHandler = () => {\r\n    dispatch(\r\n      favoritesActions.toggleFavorites({\r\n        id: currentKey.cityId,\r\n        name: currentKey.label,\r\n        curWeather: currentTemperature,\r\n        description: currentDescription,\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentKey.key !== null) {\r\n      if (faoriteState.filter((x) => x.id === currentKey.key).length > 0) {\r\n        dispatch(favoritesActions.toggleStatus(true));\r\n      } else {\r\n        dispatch(favoritesActions.toggleStatus(false));\r\n      }\r\n    }\r\n  }, [currentKey.key, faoriteState,dispatch]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Col sm={9}>\r\n        <CardDay\r\n          key={currentKey.cityId}\r\n          id={currentKey.cityId}\r\n          label={currentKey.label}\r\n          subLabel={currentTemperature}\r\n        />\r\n      </Col>\r\n      \r\n      {!toggleFav && <Col sm={1}> <h1><FaHeart color=\"grey\"></FaHeart></h1> </Col>}\r\n      {toggleFav && <Col sm={1}> <h1><FaHeart color=\"red\"></FaHeart></h1> </Col>}\r\n      <Col sm={2}>       \r\n        <Button variant=\"warning\" onClick={addToFavoritesHandler}>\r\n          {!toggleFav && \"Add current city to favorites\"}\r\n          {toggleFav && \"Remove current city from favorites\"}\r\n        </Button>\r\n      </Col>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React, { Fragment } from \"react\";\r\nimport { Col} from \"react-bootstrap\";\r\nimport CardDay from \"../UI/CardDay\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useSelector } from \"react-redux\";\r\nconst NextDaysWeather = () => {\r\n  const nextDaysDetails = useSelector(\r\n    (state) => state.currenWeatherApi.nextDaysDetails\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      {nextDaysDetails.map((day) => (\r\n     \r\n        <Col key={day.date}>\r\n          <CardDay\r\n            key={day.date}\r\n            label={day.date}\r\n            subLabel={\"Max  : \" + day.maxTemp + \"F\"}\r\n            description={\"Min  : \" + day.minTemp + \"F\"}\r\n          />\r\n        </Col>\r\n  \r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default NextDaysWeather;\r\n","import TextField from \"@mui/material/TextField\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { autocompleteApiActions } from \"../../store/autocompleteApi-slice\";\r\nimport { currenWeatherApiActions } from \"../../store/currenWeatherApi-slice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst SearchCity = () => {\r\n    const dispatch = useDispatch();\r\n    const cities = useSelector(\r\n        (state) => state.currenWeatherApi.cities\r\n      );\r\n    return (\r\n        <Autocomplete\r\n        disablePortal\r\n        id=\"combo-box-demo\"\r\n        options={cities}\r\n        renderInput={(params) => <TextField {...params} label=\"City\" />}\r\n        onChange={(event, newValue) => {\r\n          dispatch(currenWeatherApiActions.setCurrentKey(newValue));\r\n        }}\r\n        onInputChange={(event, newInputValue) => {\r\n          dispatch(autocompleteApiActions.setCurrentInput(newInputValue));\r\n        }}\r\n      />\r\n    );\r\n  };\r\n  \r\n  export default SearchCity;","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Toast } from \"react-bootstrap\";\r\n\r\nfunction ErrorNotifactions(props) {\r\n  return (\r\n    <Toast>\r\n    <Toast.Header>\r\n      <img className=\"rounded me-2\" alt=\"\" />\r\n      <strong className=\"me-auto\">{props.label}</strong>\r\n      <small>{props.description}</small>\r\n    </Toast.Header>\r\n    <Toast.Body>{props.subLabel}</Toast.Body>\r\n  </Toast>\r\n  );\r\n}\r\n\r\nexport default ErrorNotifactions;\r\n","import React, {useEffect } from \"react\";\r\nimport { Container,Row} from \"react-bootstrap\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport winterImg from \"../UI/img/winter.jpg\";\r\nimport springImg from \"../UI/img/spring.jpg\";\r\nimport summerImg from \"../UI/img/summer.jpg\";\r\nimport { currenWeatherApiActions } from \"../../store/currenWeatherApi-slice\";\r\nimport { uiActions } from \"../../store/ui-slice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport CurrentWeather from \"./CurrentWeather\";\r\nimport NextDaysWeather from \"./NextDaysWeather\";\r\nimport SearchCity from \"./SearchCity\";\r\nimport ErrorNotifactions from \"../UI/ErrorNotifactions\";\r\nimport {dummyCities , dummyCity ,dummyForecasts} from \"../UI/dummyData\"\r\n\r\n\r\nconst Main = () => {\r\n  const accuweatherKey = \"aTCAtdkX97ann5skSEVGWihmFt1JA7JK&q\"; \r\n  const currentInput = useSelector(\r\n    (state) => state.autocompleteApi.currentInput\r\n  );\r\n  const currentKey = useSelector((state) => state.currenWeatherApi.currentKey);\r\n  const currentTemperature = useSelector(\r\n    (state) => state.currenWeatherApi.currentTemperature\r\n  );\r\n  const currentDescription = useSelector(\r\n    (state) => state.currenWeatherApi.currentWeatherDescription\r\n  );\r\n\r\n  const autocompleteErroeMessage = useSelector(\r\n    (state) => state.ui.autocompleteNotification\r\n  );\r\n  const currentconditionsErroeMessage = useSelector(\r\n    (state) => state.ui.currentconditionsNotification\r\n  );\r\n  const forecastsErroeMessage = useSelector(\r\n    (state) => state.ui.forecastsNotification\r\n  );\r\n\r\n  const faoriteState = useSelector((state) => state.favorites.isFavorite);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const getWeatherKey = async () => {\r\n    try {\r\n       const response = await fetch(\r\n        `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${accuweatherKey}=${currentInput}`\r\n      );\r\n      \r\n      if (!response.ok) {\r\n\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      const data = await response.json();    \r\n      //const data = dummyCities;\r\n\r\n      const transformedCities = data.map((city) => {\r\n        return {\r\n          key: city.Key,\r\n          cityId: city.Key,\r\n          label:\r\n            city.LocalizedName +\r\n            \" - \" +\r\n            city.AdministrativeArea.LocalizedName +\r\n            \" - \" +\r\n            city.Country.LocalizedName,\r\n        };\r\n      });\r\n\r\n      dispatch(currenWeatherApiActions.setCurrentCities(transformedCities));\r\n    } catch (error) {\r\n      if (error.message !== \"Unexpected end of JSON input\") {\r\n        dispatch(\r\n          uiActions.showAutocompleteNotification({\r\n            status: \"error\",\r\n            title: \"Error!\",\r\n            message: error.message,\r\n            type:\"autocomplete\"\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const getCityWeatherByKey = async () => {\r\n    try {\r\n          const response = await fetch(\r\n        `https://dataservice.accuweather.com/currentconditions/v1/${currentKey.cityId}?apikey=${accuweatherKey}`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      const data = await response.json();\r\n\r\n      //const data = dummyCity;\r\n  \r\n      const transformedCityDetails = data.map((city) => {\r\n        return {\r\n          key: city.EpochTime,\r\n          cityId: currentKey.cityId,\r\n          label: currentKey.label,\r\n          subLabel: city.WeatherText,\r\n          temperature:\r\n            city.Temperature.Imperial.Value + city.Temperature.Imperial.Unit,\r\n        };\r\n      });\r\n      dispatch(\r\n        currenWeatherApiActions.setCurrentCityDetails(transformedCityDetails)\r\n      );\r\n    } catch (error) {\r\n       if (error.message !== \"Unexpected end of JSON input\") {\r\n        dispatch(\r\n          uiActions.showCurrentconditionsNotification({\r\n            status: \"error\",\r\n            title: \"Error!\",\r\n            message: error.message,\r\n            type:\"Currentconditions\"\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const getCity5dayWeatherByKey = async () => {\r\n    try {\r\n       const response = await fetch(\r\n        `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${currentKey.cityId}?apikey=${accuweatherKey}`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      const data = await response.json();\r\n     // const data = dummyForecasts\r\n    \r\n      dispatch(currenWeatherApiActions.setNextDaysDetails(data.DailyForecasts));\r\n    } catch (error) {\r\n      if (error.message !== \"Unexpected end of JSON input\") {\r\n        dispatch(\r\n          uiActions.showForecastsNotification({\r\n            status: \"error\",\r\n            title: \"Error!\",\r\n            message: error.message,\r\n            type:\"Forecasts\"\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeatherKey();\r\n  }, [currentInput]);\r\n\r\n  useEffect(() => {\r\n    getCityWeatherByKey();\r\n    getCity5dayWeatherByKey();\r\n  }, [currentKey]);\r\n\r\n  return (\r\n    <Container>\r\n      {autocompleteErroeMessage !== null && (\r\n        <ErrorNotifactions\r\n          label={autocompleteErroeMessage.title}\r\n          subLabel={autocompleteErroeMessage.message}\r\n          description={autocompleteErroeMessage.type}\r\n        />\r\n      )}\r\n       {currentconditionsErroeMessage !== null && (\r\n        <ErrorNotifactions\r\n          label={currentconditionsErroeMessage.title}\r\n          subLabel={currentconditionsErroeMessage.message}\r\n          description={currentconditionsErroeMessage.type}\r\n        />\r\n      )}\r\n       {forecastsErroeMessage !== null && (\r\n        <ErrorNotifactions\r\n          label={forecastsErroeMessage.title}\r\n          subLabel={forecastsErroeMessage.message}\r\n          description={forecastsErroeMessage.type}\r\n        />\r\n      )}\r\n      <Row>\r\n        <SearchCity />\r\n      </Row>\r\n      <br></br>\r\n      <Row>\r\n        <CurrentWeather />\r\n      </Row>\r\n      <br></br>\r\n      <Row>\r\n        <Container>\r\n          {parseInt(currentTemperature) < 60 && <Image src={winterImg} fluid />}\r\n          {parseInt(currentTemperature) >= 60 &&\r\n            parseInt(currentTemperature) <= 77 && (\r\n              <Image src={springImg} fluid />\r\n            )}\r\n          {parseInt(currentTemperature) > 77 && <Image src={summerImg} fluid />}\r\n        </Container>\r\n      </Row>\r\n      <br></br>\r\n      <Row>\r\n        <NextDaysWeather />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { currenWeatherApiActions } from \"../../store/currenWeatherApi-slice\";\r\n\r\nfunction CardWeather(props) {\r\n  const dispatch = useDispatch();\r\n  const showFullDetailsHandler = () => {\r\n    dispatch(\r\n      currenWeatherApiActions.setCurrentKey({\r\n        key: props.id,\r\n        cityId: props.id,\r\n        label: props.label,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card style={{ width: \"14rem\" ,minHeight:\"14em\"}}>\r\n        <Card.Body>\r\n          <Card.Title>{props.label}</Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">\r\n            {props.subLabel}\r\n          </Card.Subtitle>\r\n          <Card.Text>{props.description}</Card.Text>\r\n\r\n          <Link to=\"/\">\r\n            <Button variant=\"warning\" onClick={showFullDetailsHandler}>\r\n              Show full details\r\n            </Button>\r\n          </Link>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardWeather;\r\n","export default __webpack_public_path__ + \"static/media/pexels-david-jakab-1080722.1f8505f8.jpg\";","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport CardWeather from \"../UI/CardWeather\";\r\nimport { Container, Col, Row, Alert } from \"react-bootstrap\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport img from \"../UI/img/pexels-david-jakab-1080722.jpg\";\r\n\r\nfunction Favorites() {\r\n  const favoritesCities = useSelector((state) => state.favorites.items);\r\n\r\n  return (\r\n    <Container>\r\n      {favoritesCities.length<1 && <Alert variant=\"warning\">\r\n        <Alert.Heading>Oh ! The Favorites page is empty!</Alert.Heading>\r\n        <p>\r\n          To see your favorite cities on this page, please navigate to the\r\n          homepage and add the cities you like to your favorites page using the\r\n          \"Add current to favorites\" button\r\n        </p>\r\n      </Alert>}\r\n      <Row>\r\n        {favoritesCities.map((city) => (\r\n          <Col key={city.id}>\r\n            <CardWeather\r\n              key={city.id}\r\n              id={city.id}\r\n              label={city.name}\r\n              subLabel={city.curWeather}\r\n              description={city.description}\r\n            />\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n      <br></br>\r\n      <Row>\r\n        <Image src={img} fluid />\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Favorites;\r\n","import React, { Fragment } from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Main from \"../Main/Main\";\r\nimport Favorites from \"../Favorites/Favorites\";\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <Container>\r\n      <Router>\r\n        <nav className=\"nav\">\r\n          <Container>\r\n            <Row >\r\n              <Col className=\"col-1\">\r\n                <h4>\r\n                  <Link to=\"/\" style={{ textDecoration: \"none\" }}>\r\n                    <div style={{ color: \"black\" }} className=\"nav-link\">\r\n                      Home\r\n                    </div>\r\n                  </Link>\r\n                </h4>\r\n              </Col>\r\n              <Col className=\"col-1\">\r\n                <h4>\r\n                  <Link to=\"/fav\" style={{ textDecoration: \"none\" }}>\r\n                    <div style={{ color: \"black\" }} className=\"nav-link\">\r\n                      Favorites\r\n                    </div>\r\n                  </Link>\r\n                </h4>\r\n              </Col>\r\n              <Col className=\"col-10 text-end\">\r\n                <h4>\r\n                  <div\r\n                    style={{ color: \"black\", fontFamily: \"cursive\" }}\r\n                    className=\"nav-link\"\r\n                  >\r\n                    Herolo Weather Task\r\n                  </div>\r\n                </h4>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </nav>\r\n        <Fragment>\r\n          <Routes>\r\n            <Route exact path=\"/\" element={<Main />} />\r\n            <Route exact path=\"/fav\" element={<Favorites />} />\r\n          </Routes>\r\n        </Fragment>\r\n      </Router>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport { Container } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst App = ()=> {\n  return (\n    <Container>\n    <Navigation/>\n  </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}